---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import "highlight.js/styles/github.css";
import "../styles/globals.css";
import SrcPackage from "../../../package.json";
import Logo from "../assets/logo.png";

const latestVersion = SrcPackage.version;

const createStoreSample = `
import { create } from "unglitch";

type MyStore = {
  todos: string[];
};

const store = create({
  todos: []
});

export const { 
  useStore, 
  useFetchData, 
  getSnapshot, 
  update 
} = store;
`.trim();

const useStoreSample = `
import { useStore } from "./utils/store";

export default function Todos() {
  const [ todos ] = useStore(
    state => state.todos
  );

  return (
    <ul>
      {todos.map((todo) => (
        <li>{todo}</li>
      ))}
    </ul>
  );
}
`.trim();

const updateStoreSample = `
import { update } from "./utils/store";

export default function TodoAdd() {
  return (
    <Button onClick={() => 
      update.merge(() => ({
        todos: ['My new todo']
      }))
    }>Add Todo</Button>
  );
}
`.trim();

const updateStoreHardSample = `
import { update } from "./utils/store";

export default function TodoAdd() {
  return (
    <Button onClick={() => 
      update((state) => ({
        todos: [...state.todos, 'My new todo']
      }))
    }>Add Todo</Button>
  );
}
`.trim();

const fetchDataSampleSimple = `
import { useFetchData } from "./utils/store";
import fetchTodosFromApi from "./api-todos";

export default function Todos() {
  const { isFetching, data: todos } = useFetchData(async (update) => {
    return fetchTodosFromApi();
  },
  {
    onSuccess: (update, dataFromApi) => {
      // assuming dataFromApi is {status, error, data}

      update.merge(() => ({
        todos: dataFromApi.data
      }));
    },
    data: (state, isFetching) => state.todos,
    // the token makes sure that the data is only 
    // fetched in one place with the same token
    token: 'fetch_todos'
  });

  return (
    <>
      {isFetching && <p>Loading fresh data...</p>}
      <ul>
        {todos.map((todo) => (
          <li>{todo}</li>
        ))}
      </ul>
    </>
  );
}
`.trim();

const refreshDataSample = `
import { useFetchData } from "./utils/store";
import fetchTodosFromApi from "./api-todos";

export default function Todos() {
  const { isFetching, data: todos, refresh } = useFetchData(
    /** ... */
  );

  return (
    <>
      {isFetching && <p>Loading fresh data...</p>}

      <Button onClick={refresh}>Refresh Todos</Button>
      <p>
        You can DDOS-click this button. As long as a request is running
        no other request will be fired
      </p>

      <ul>
        {todos.map((todo) => (
          <li>{todo}</li>
        ))}
      </ul>
    </>
  );
}
`.trim();

const refreshDataSampleInterval = `
import { useFetchData } from "./utils/store";
import fetchTodosFromApi from "./api-todos";

export default function Todos() {
  const { isFetching, data: todos, refresh } = useFetchData(
    /** ... */,
    {
      refreshInterval: 5000 // every 5 seconds
    }
  );

  return (
    <>
      {/** ... */}
    </>
  );
}
`.trim();
---

<Layout title="unglitch - THE state manager.">
  <header
    class="relative isolate overflow-hidden bg-[#0f1a2c] py-24 sm:py-26"
    style="background: linear-gradient(to bottom, #450b55, #0f1a2c)"
  >
    <!-- <div
      class="absolute inset-0 -z-10 h-full w-full blur-xl opacity-60"
      style="background-image: url('/public/unglitch-tile.png'); background-size: 100%"
    >
    </div> -->

    <div
      class="absolute -top-52 left-1/2 -z-10 -translate-x-1/2 transform-gpu blur-3xl sm:top-[-28rem] sm:ml-16 sm:translate-x-0 sm:transform-gpu"
      aria-hidden="true"
    >
      <div
        class="aspect-[1097/845] w-[68.5625rem] bg-gradient-to-tr from-[#ff4694] to-[#776fff] opacity-20"
        style="clip-path: polygon(74.1% 44.1%, 100% 61.6%, 97.5% 26.9%, 85.5% 0.1%, 80.7% 2%, 72.5% 32.5%, 60.2% 62.4%, 52.4% 68.1%, 47.5% 58.3%, 45.2% 34.5%, 27.5% 76.7%, 0.1% 64.9%, 17.9% 100%, 27.6% 76.8%, 76.1% 97.7%, 74.1% 44.1%)"
      >
      </div>
    </div>
    <div class="mx-auto max-w-5xl px-6 lg:px-8">
      <div class="mx-auto max-w-2xl lg:mx-0">
        <img
          src={Logo.src}
          alt=""
          class="w-[120px] h-[120px] md:w-[250px] md:h-[250px] -ml-2 md:-ml-9 mb-6"
        />

        <h2 class="text-4xl font-bold tracking-tight text-white sm:text-6xl">
          State Management + Caching for everyone.
        </h2>
        <p class="mt-6 text-2xl text-gray-300 leading-10">
          React v18+ since it is using the official <a
            href="https://react.dev/reference/react/useSyncExternalStore"
            ><mark>Store API.</mark></a
          >
          <br /> If you like
          <a href="https://github.com/pmndrs/zustand"><mark>zustand</mark></a>
          and <a href="https://tanstack.com/query/v3/"
            ><mark>react-query</mark></a
          > you will love this.
        </p>
      </div>
      <div class="mx-auto mt-10 max-w-2xl lg:mx-0 lg:max-w-none">
        <dl
          class="mt-16 grid grid-cols-1 gap-8 sm:mt-20 sm:grid-cols-2 lg:grid-cols-4"
        >
          <div class="flex flex-col-reverse">
            <dt class="text-base leading-7 text-gray-300">
              from anywhere in your App
            </dt>
            <dd class="text-2xl font-bold leading-9 tracking-tight text-white">
              Simple <code class="line alt">update</code>
            </dd>
          </div>
          <div class="flex flex-col-reverse">
            <dt class="text-base leading-7 text-gray-300">Really.</dt>
            <dd class="text-2xl font-bold leading-9 tracking-tight text-white">
              less than 3kb
            </dd>
          </div>
        </dl>
      </div>
      <a
        href="https://github.com/activenode/unglitch"
        class="inline-block mt-8 rounded-lg mr-5 bg-slate-200 hover:bg-blue-700 hover:text-white text-black font-bold py-2 px-6"
      >
        @GitHub
      </a>
    </div>
  </header>

  <main class="max-w-5xl mx-auto px-6">
    <div>
      <p class="text-white text-3xl text-center mt-12 leading-10">
        This library <strong>can</strong> be used without TypeScript, but all the
        sample code in here is written in TypeScript.
        <span class="text-indigo-200">And why not? It's 2023.</span>
      </p>

      <div class="flex flex-col items-center justify-center mt-24">
        <div class="npmi">
          <code class="line">npm i unglitch@latest</code>
        </div>

        <code class="text-fuchsia-300 opacity-80 font-mono p-2"
          >v{latestVersion}</code
        >
      </div>

      <section>
        <h2 class="text-white text-5xl font-semibold text-center mt-36 mb-6">
          What unglitch is
        </h2>

        <p class="text-gray-200 text-2xl mt-12 leading-10 text-justify">
          unglitch was developed with its own vision before the author knew <em
            >react-query</em
          >. And that is a good thing because it allowed the mind to be
          uninfluenced by existing code. It was actually inspired by <em
            >zustand</em
          >
          with the goal to make it even simpler and smaller and being able to avoid
          side-effects in web applications using the Power of the new Store API in
          React v18+.
        </p>
      </section>

      <section>
        <h2 class="text-white text-4xl font-semibold text-center mt-28 mb-6">
          Core Principles
        </h2>

        <div class="flex items-center justify-center text-2xl">
          <ul class="text-teal-100 font-normal text-left flex flex-col gap-2">
            <li class="before:content-['❌']">
              Deeply nested states are bad and can always be flattened.
            </li>
            <li class="before:content-['✅']">
              <span class="pl-1"
                >Be small. Be fast. Be simple. Be predictable.</span
              >
            </li>
            <li class="before:content-['✅']">
              <span class="pl-1">
                Prevent unnecessary fetches (<em>Lock'n'Release</em>).
              </span>
            </li>
            <li class="before:content-['✅']">
              <span class="pl-1">
                You know your App, you know the Shape of your State
              </span>
            </li>
            <li class="before:content-['✅']">
              <span class="pl-1">Your store is your cache</span>
            </li>
            <li class="before:content-['✅']">
              <span class="pl-1">Do not blow up the memory</span>
            </li>
            <li class="before:content-['✅']">
              <span class="pl-1">Updating (foreign) data must be easy</span>
            </li>
          </ul>
        </div>
      </section>

      <section class="text-center">
        <h2 class="text-white text-3xl font-semibold mt-28 mb-6">
          Why isn't unglitch caching every request?
        </h2>

        <p class="text-gray-200 text-xl leading-10">
          Read the Core Principles again. <br /> Caching unnecessary data only to
          throw it away later is a waste of memory.
        </p>
      </section>

      <h2 class="text-white text-5xl font-semibold text-center mt-36 mb-6">
        Getting started
      </h2>

      <ul role="list" class="link-card-grid flex flex-col gap-5">
        <Card
          title="Step 1: Create a Store"
          lang="typescript"
          file="your_app/utils/store.ts"
        >
          {createStoreSample}
        </Card>

        <Card
          title="Step 2: Use the Store"
          lang="typescript"
          file="your_app/SomeComponent.tsx"
        >
          {useStoreSample}
        </Card>

        <Card
          title="Updating the Store"
          lang="typescript"
          file="your_app/SomeComponent.tsx"
        >
          {updateStoreSample}
        </Card>

        <Card
          title="Updating the Store the harder way"
          description="Does the same as the merge sample above"
          lang="typescript"
          file="your_app/SomeComponent.tsx"
        >
          {updateStoreHardSample}
        </Card>
      </ul>

      <h2 class="text-white text-4xl font-semibold text-center mt-36 mb-6">
        Fetching Data
      </h2>

      <ul role="list" class="link-card-grid flex flex-col gap-5">
        <Card
          title="useFetchData Basic"
          lang="typescript"
          file="your_app/AnyComponent.tsx"
        >
          {fetchDataSampleSimple}
        </Card>
      </ul>

      <h3 class="text-white text-3xl font-semibold text-center mt-36 mb-6">
        Refreshing Data
      </h3>

      <ul role="list" class="link-card-grid flex flex-col gap-5">
        <Card
          title="useFetchData / refresh"
          lang="typescript"
          file="your_app/AnyComponent.tsx"
        >
          {refreshDataSample}
        </Card>

        <Card
          title="useFetchData / refreshInterval"
          lang="typescript"
          file="your_app/AnyComponent.tsx"
        >
          {refreshDataSampleInterval}
        </Card>
      </ul>

      <p class="text-center text-white text-lg">
        Docs coming soon for: `waitFor`, `allow`, `getRealtime` and
        `getSnapshot`. <strong>Stay tuned</strong>.
      </p>

      <h3 class="text-white text-3xl font-semibold text-center mt-36 mb-6">
        Controlling the Fetch
      </h3>

      <ul role="list" class="link-card-grid flex flex-col gap-5">
        <!-- <Card
          title="getSnapshot"
          lang="typescript"
          description=""
          file="your_app/AnyComponent.tsx"
        >
          {refreshDataSample}
        </Card> -->
      </ul>

      <h3 class="text-white text-3xl font-semibold text-center mt-36 mb-6">
        Realtime Data
      </h3>

      <div>
        <p>
          Data inside of a component is never realtime. It is always a snapshot
          of the current rendering cycle.
        </p>
        <p>Normally you don't notice and normally you also don't need to.</p>
        <p>
          Let's elaborate on the problem for you to understand if and when you
          might need realtime data.
        </p>
      </div>

      tbd
    </div>

    <div class="h-32"></div>
  </main>

  <script>
    import hljs from "highlight.js";

    hljs.highlightAll();
  </script>

  <style>
    .card-code {
      @apply mt-2;
    }

    mark {
      @apply mx-2 inline-block transition-transform rounded relative bg-transparent text-white;
    }

    mark::before {
      content: "";
      position: absolute;
      left: 0;
      width: 100%;
      height: 1.4em;
      top: 0.17em;
      z-index: -1;
      /* border-radius: 0.5rem; */
      /* background-color: yellow; */
      border-bottom: 1px solid yellow;
    }

    mark.alt {
      @apply text-white;
    }

    mark.alt::before {
      @apply bg-gradient-to-r from-[#ff4694] to-[#776fff];
    }

    a:hover > mark {
      transform: scale(1.06);
    }

    main {
      margin: auto;
      padding: 1.5rem 0;
    }

    h1 {
      font-size: 3rem;
      font-weight: 800;
      margin: 0;
    }

    .instructions {
      line-height: 1.6;
      margin: 1rem 0;
      border: 1px solid rgba(var(--accent), 25%);
      background-color: white;
      padding: 1rem;
      border-radius: 0.4rem;
    }
    code.line {
      font-size: 0.875em;
      font-weight: bold;
      background: rgba(var(--accent), 12%);
      color: rgb(var(--accent));
      border-radius: 4px;
      padding: 0.3em 0.45em;
      display: inline-block;
    }

    code.alt {
      color: var(--accent-light);
      border: 1px solid rgba(var(--accent), 25%);
      line-height: 1.1em;
    }

    .npmi {
      @apply p-4  rounded-lg border-2 border-fuchsia-600 border-opacity-25;
      background: linear-gradient(
        to right,
        #0f0c296a,
        #302b639f,
        #38243e
      ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    }

    .npmi code {
      @apply p-0 px-3 font-extrabold text-2xl md:text-4xl text-fuchsia-200 bg-transparent;

      /** bg-clip-text bg-gradient-to-r from-purple-400 to-pink-60 text-transparent0
    */
    }

    .instructions strong {
      color: rgb(var(--accent));
    }
  </style>
</Layout>
